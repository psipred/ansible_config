---

  - name: "Add {{ blast_worker_user }} user"
    user:
      name: "{{ blast_worker_user }}"
      password: "{{ blast_worker_hashed_password }}"
      group: apache
    become_user: root
    become_method: sudo

  - name: check we have pip
    stat:
      path: /usr/bin/pip3
    become_user: root
    register: pip_exist
  # - name: Download get-pip.py
  #   shell: "chdir={{ django_aa_home }} wget --timeout 120 https://bootstrap.pypa.io/get-pip.py -O get-pip.py"
  #   become_user: "{{ django_aa_user }}"
  #   register: get_url_result
  #   until: get_url_result.stdout.find("Unable to establish SSL connection") == -1
  #   retries: 2
  #   delay: 10
  #   when: pip_install.stdout.find("from /usr/lib/python3.4/site-packages (python 3.4)") == -1

  - name: Download get-pip.py
    become_user: "{{ blast_worker_user }}"
    when: pip_exist.stat.exists == False
    get_url:
      url: https://bootstrap.pypa.io/get-pip.py
      dest: "{{  blast_worker_home }}/get-pip.py"
      timeout: 120
    register: get_url_result
    # until: get_url_result.stdout.find("Unable to establish SSL connection") == -1
    # retries: 2
    # delay: 10

  - name: Install pip
    shell: "chdir={{ blast_worker_home }} /bin/python3.4 get-pip.py"
    when: pip_exist.stat.exists == False

  # The virtualenv installed above is broken so we update it here
  - name: Upgrade virtualenv
    shell: pip install --upgrade virtualenv

  - name: Check if we have aa_env
    stat: "path={{ blast_worker_home }}/aa_env"
    become_user: root
    register: aa_env_exist

  - name: Create the blast worker virtualenv
    become_user: "{{ blast_worker_user }}"
    command: virtualenv -p /bin/python3.4 aa_env
    when: aa_env_exist.stat.exists == False
    args:
        chdir: "{{ blast_worker_home }}"

  - name: Check pip install
    shell: pip --version
    register: pip_install
    check_mode: no
    become_user: root
    become_method: sudo

  # - name: Download get-pip.py
  #   shell: "chdir={{ django_worker_home }} wget --timeout 120 https://bootstrap.pypa.io/get-pip.py -O get-pip.py"
  #   become_user: "{{ django_worker_user }}"
  #   register: get_url_result
  #   until: get_url_result.stdout.find("Unable to establish SSL connection") == -1
  #   retries: 2
  #   delay: 10
  #   when: pip_install.stdout.find("from /usr/lib/python3.4/site-packages (python 3.4)") == -1

  - name: Download get-pip.py
    become_user: "{{ blast_worker_user }}"
    when: pip_install.stdout.find("from /usr/lib/python3.4/site-packages (python 3.4)") == -1
    get_url:
      url: https://bootstrap.pypa.io/get-pip.py
      dest: "{{ blast_worker_home }}/get-pip.py"
      timeout: 120
    register: get_url_result

  - name: Install pip
    shell: "chdir={{ blast_worker_home }} /bin/python3.4 get-pip.py"
    when: pip_install.stdout.find("from /usr/lib/python3.4/site-packages (python 3.4)") == -1

  - name : Check Out AA from git
    become_user: "{{ blast_worker_user }}"
    git:
      repo: https://github.com/AnalyticsAutomated/analytics_automated.git
      dest: "{{ blast_worker_home }}analytics_automated"
      clone: yes
      force: yes

  - name: Install requirements
    become_user: "{{ blast_worker_user }}"
    pip:
      state: latest
      chdir: "{{ blast_worker_home }}"
      virtualenv: "{{ blast_worker_home }}aa_env"
      virtualenv_command: /bin/virtualenv
      virtualenv_python: "{{ blast_worker_home }}aa_env/bin/python"
      requirements: "{{ blast_worker_home }}analytics_automated/requirements/staging.txt"

  - name: Copy aa staging_conf
    become_user: "{{ blast_worker_user }}"
    copy:
      src: secrets/staging_worker.py
      dest: "{{ blast_worker_home }}/analytics_automated/analytics_automated_project/settings/staging.py"
      owner: "{{ blast_worker_user }}"

  - name: Copy aa staging secrets
    become_user: "{{ blast_worker_user }}"
    copy:
      src: secrets/staging_worker_secrets.json
      dest: "{{ blast_worker_home }}/analytics_automated/analytics_automated_project/settings/"
      owner: "{{ blast_worker_user }}"

  - name: Copy aa base secrets
    become_user: "{{ blast_worker_user }}"
    copy:
      src: secrets/base_secrets.json
      dest: "{{ blast_worker_home }}/analytics_automated/analytics_automated_project/settings/"
      owner: "{{ blast_worker_user }}"

  - name: Copy celery conf
    become_user: "{{ blast_worker_user }}"
    copy:
      src: files/celery_staging.py
      dest: "{{ blast_worker_home }}/analytics_automated/analytics_automated_project/celery.py"
      owner: "{{ blast_worker_user }}"

  - name: Copy wsgi.py
    become_user: "{{ blast_worker_user }}"
    copy:
      src: files/wsgi.py
      dest: "{{ blast_worker_home }}/analytics_automated/analytics_automated_project/"
      owner: "{{ blast_worker_user }}"

  - name: Make aa logging dir
    become_user: "{{ blast_worker_user }}"
    file:
      path: "{{ blast_worker_home }}/analytics_automated/logs"
      state: directory
      owner: "{{ blast_worker_user }}"

  - name: check submissions/ state
    become_user: "{{ blast_worker_user }}"
    stat:
      path: "{{ blast_worker_home }}/analytics_automated/submissions/"
    register: sym

  # - debug:
  #     msg: "Path exists and isn't a symlink"
  #   when: sym.stat.islnk is defined and sym.stat.islnk == False

  - name: remove the submissions dir
    become_user: "{{ blast_worker_user }}"
    file:
      path: "{{ blast_worker_home }}/analytics_automated/submissions"
      state: absent
    when: sym.stat.islnk is defined and sym.stat.islnk == False

  - name: symlink submissions to the aa dir
    become_user: "{{ blast_worker_user }}"
    file:
      src: /webdata/submissions
      dest: "{{ blast_worker_home }}/analytics_automated/submissions"
      state: link
      owner: "{{ blast_worker_user }}"
      group: apache
      mode: "ug+rw"
    when: sym.stat.islnk is defined and sym.stat.islnk == False

  - name: Check Celery running status
    shell: ps aux | grep celery
    register: celery_running
    check_mode: no

  - name: Stop the aa_workers
    shell: "chdir={{ blast_worker_home }}/analytics_automated/ source {{ blast_worker_home }}aa_env/bin/activate; celery multi stop worker --pidfile=celery.pid"
    become_user: "{{ blast_worker_user }}"
    #when: celery_running.stdout.find("celery worker") == 1

  - name: Check Celery stopped status
    shell: ps aux | grep celery
    register: celery_running
    check_mode: no

# Here we skip running the django migrations as they are only run by aahead
# AND this role MUST come after aahead installation runs
#celery --app=analytics_automated_project.celery:app worker --loglevel=INFO -Q localhost,celery
  - name: Start the aa_workers
    shell: "chdir={{ blast_worker_home }}/analytics_automated/ source {{ blast_worker_home }}aa_env/bin/activate; celery --app=analytics_automated_project.celery:app worker --loglevel=INFO -Q blast,low_blast,high_blast --detach --pidfile=celery.pid"
    become_user: "{{ blast_worker_user }}"
    # environment:
    #   DRMAA_LIBRARY_PATH: /opt/ogs_src/GE2011.11/lib/linux-x64/libdrmaa.so
    #   SGE_ROOT: /opt/ogs_src/GE2011.11/
    # #when: celery_running.stdout.find("-m celery worker --loglevel=INFO") == -1

  - name: copy over the blast worker service
    become_user: root
    become_method: sudo
    copy:
      src: files/blastworker.service
      dest: /etc/systemd/system/
      mode: "uog+x"

  - name: Add service to systemctl
    become_user: root
    become_method: sudo
    shell: systemctl enable blastworker.service

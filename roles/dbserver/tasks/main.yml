---

WARNING WARNING. postgred 9.6 must be installed on remote from now on: DETAILS below
YML NEEDS EDITING

Adapted from:
https://altinukshini.wordpress.com/2018/05/03/upgrade-postgres-9-2-to-9-6-in-centos-7-bold-lines/
https://medium.com/@plashchynski/postgresql-upgrade-on-centos-4c0ddd2f8687

sudo su
yum install https://yum.postgresql.org/9.6/redhat/rhel-7.3-x86_64/pgdg-redhat96-9.6-3.noarch.rpm
yum install postgresql96-server postgresql96-contrib

mv /usr/bin/pg_ctl{,-orig}
echo '#!/bin/bash' > /usr/bin/pg_ctl
echo '"$0"-orig "${@/unix_socket_directory/unix_socket_directories}"' >> /usr/bin/pg_ctl
chmod +x /usr/bin/pg_ctl

### /usr/pgsql-9.6/bin/postgresql96-setup initdb --pgdata=/var/postgres9.6/ --lc-collate="en_US.UTF-8"
mkdir /var/postgres9.6
chown postgres /var/postgres9.6
su postgres
/usr/pgsql-9.6/bin/initdb -D /var/postgres9.6 --locale="en_US.UTF-8"

cd /tmp
/usr/pgsql-9.6/bin/pg_upgrade -v -b /usr/bin/ -B /usr/pgsql-9.6/bin/ -d /var/postgres/ -D /var/postgres9.6/
exit

mv -f /usr/bin/pg_ctl{-orig,}
mk /usr/bin/old_pgsql

mv /bin/postgres /usr/bin/old_pgsql/
mv /bin/pg_ctl /usr/bin/old_pgsql/

su postgres
/usr/pgsql-9.6/bin/pg_ctl start -D /var/postgres9.6
cd /tmp
./analyze_new_cluster.sh

#update ansible role with new paths
#update postgresql.service with new paths and copy over

#ensure pg_hba.conf has final line
# host  all  all 0.0.0.0/0 md5
# and ensure postgresql.conf listen_addresses = '*' is adde


  - name: Install postgreSQL
    yum:
      pkg: postgresql, postgresql-server, postgresql-contrib
      state: latest
    become_user: root
    become_method: sudo
    register: postgres_installed

  - name: Get the current firewalld rules
    shell: firewall-cmd --list-all
    register: firewalldrules
    check_mode: no
    become_user: root
    become_method: sudo

  - name: Add Postgres firewalld rules
    command: firewall-cmd --zone=public --add-port=5432/tcp --permanent
    become_user: root
    become_method: sudo
    when: firewalldrules.stdout.find("5432/tcp") == -1

  - name: Add http firewalld rules
    command: firewall-cmd --zone=public --add-service=http --permanent
    become_user: root
    become_method: sudo
    when: firewalldrules.stdout.find("http") == -1

  - name: Enable firewalld port forwarding
    command: firewall-cmd --zone=public --add-masquerade --permanent
    become_user: root
    become_method: sudo
    when: firewalldrules.stdout.find("http") == -1

  - name: Portforward 80 to 8000
    command: firewall-cmd --zone=public --add-forward-port=port=80:proto=tcp:toport=8000 --permanent
    become_user: root
    become_method: sudo
    when: firewalldrules.stdout.find("http") == -1

  - name: Portforward 443 to 4433
    command: firewall-cmd --zone=public --add-forward-port=port=443:proto=tcp:toport=4433 --permanent
    become_user: root
    become_method: sudo

  - name: Reload firewalld
    command: firewall-cmd --reload
    become_user: root
    become_method: sudo

  - name: Check if postgresDB location exists
    stat: "path={{ postgres_db_path }}"
    register: postgresDB_exist

  - name: Make postgres db directory
    file:
      path: "{{ postgres_db_path }}"
      state: directory
      owner: "{{ postgres_user }}"
    when: postgresDB_exist.stat.exists == False

  - name: Initialise postgresDB
    shell: "/bin/initdb -D {{ postgres_db_path }}"
    become_user: "{{ postgres_user }}"
    when: postgresDB_exist.stat.exists == False

  # Instead of only doing this once set up we could copy the files whenever
  # then change and then restart postgres
  - name: Copy postgres config
    copy:
      src: files/web_server_postgresql.conf
      dest: "{{  postgres_db_path }}/postgresql.conf"
      owner: "{{ postgres_user }}"
    when: postgresDB_exist.stat.exists == False

  - name: Copy hba config
    copy:
      src: files/web_server_pg_hba.conf
      dest: "{{  postgres_db_path }}/pg_hba.conf"
      owner: "{{ postgres_user }}"
    when: postgresDB_exist.stat.exists == False

  - name: Check postgres status
    shell: ps aux | grep postgres
    register: postgres_running
    check_mode: no

  - name: Start postgresDB
    shell: "/usr/pgsql-9.6/bin/pg_ctl start -D {{ postgres_db_path }}"
    register: postgres_started
    become_user: "{{ postgres_user }}"
    when: postgres_running.stdout.find("/usr/bin/postgres") == -1

  - name: Restart postgresDB
    shell: "/usr/pgsql-9.6/bin/pg_ctl restart -D {{ postgres_db_path }}"
    register: postgres_restarted
    become_user: "{{ postgres_user }}"
    when: postgres_installed.changed == True
    # if this is run it should trigger a
    # restart of the webserver AND the workers

  - name: "Create {{ a_a_db }} db"
    postgresql_db:
      name: "{{ a_a_db }}"

  - name: "Add {{ a_a_user }} to postgres"
    postgresql_user:
      name: "{{ a_a_user }}"
      password: "{{ a_a_password }}"
      role_attr_flags: CREATEDB
      db: "{{ a_a_db }}"
      priv: ALL

  - name: "Create {{ web_db }} db"
    postgresql_db:
      name: "{{ web_db }}"

  - name: "Add {{ web_db_user }} to postgres"
    postgresql_user:
      name: "{{ web_db_user }}"
      password: "{{ web_db_password }}"
      role_attr_flags: CREATEDB
      db: "{{ web_db }}"
      priv: ALL

  - name: "Create {{ b_c_db }} db"
    postgresql_db:
      name: "{{ b_c_db }}"

  - name: "Add {{ b_c_user }} to postgres"
    postgresql_user:
      name: "{{ b_c_user }}"
      password: "{{ b_c_password }}"
      role_attr_flags: CREATEDB
      db: "{{ b_c_db }}"
      priv: ALL

  - name: "Enable hstore for {{ b_c_db }}"
    postgresql_ext:
      db: "{{ b_c_db }}"
      name: hstore

  - name: copy over the postgresql systemd service
    copy:
      src: files/postgresql.service
      dest: /etc/systemd/system/
      mode: "uog+x"

  - name: Add postgres to systemctl
    become_user: root
    become_method: sudo
    shell: systemctl enable postgresql.service

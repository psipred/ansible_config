---

  - name: Install postgreSQL
    yum:
      pkg: postgresql, postgresql-server
      state: latest
    sudo: yes
    register: postgres_installed

  - name: Get the current firewalld rules
    shell: firewall-cmd --list-all
    register: firewalldrules
    always_run: yes
    sudo: yes

  - name: Add Postgres firewalld rules
    command: firewall-cmd --zone=public --add-port=5432/tcp --permanent
    sudo: yes
    when: firewalldrules.stdout.find("5432/tcp") == -1

  - name: Reload firewalld
    command: firewall-cmd --reload
    sudo: true

  - name: Check if postgresDB location exists
    stat: "path={{ postgres_db_path }}"
    register: postgresDB_exist

  - name: Make postgres db directory
    file:
      path: "{{ postgres_db_path }}"
      state: directory
      owner: "{{ postgres_user }}"
    when: postgresDB_exist.stat.exists == False

  - name: Initialise postgresDB
    shell: "/bin/initdb -D {{ postgres_db_path }}"
    become_user: "{{ postgres_user }}"
    when: postgresDB_exist.stat.exists == False

  # Instead of only doing this once set up we could copy the files whenever
  # theu change and then restart postgres
  - name: Copy postgres config
    copy:
      src: files/web_server_postgresql.conf
      dest: "{{  postgres_db_path }}/postgresql.conf"
      owner: "{{ postgres_user }}"
    when: postgresDB_exist.stat.exists == False

  - name: Copy hba config
    copy:
      src: files/web_server_pg_hba.conf
      dest: "{{  postgres_db_path }}/pg_hba.conf"
      owner: "{{ postgres_user }}"
    when: postgresDB_exist.stat.exists == False

  - name: Check postgres status
    shell: ps aux | grep postgres
    register: postgres_running
    always_run: yes

  - name: Start postgresDB
    shell: "pg_ctl start -D {{ postgres_db_path }}"
    register: postgres_started
    become_user: "{{ postgres_user }}"
    when: postgres_running.stdout.find("/usr/bin/postgres") == -1

  - name: Restart postgresDB
    shell: "pg_ctl restart -D {{ postgres_db_path }}"
    register: postgres_restarted
    become_user: "{{ postgres_user }}"
    when: postgres_installed.changed == True
    # if this is run it should trigger a
    # restart of the webserver AND the workers

  - name: "Create {{ a_a_db }} db"
    postgresql_db:
      name: "{{ a_a_db }}"

  - name: "Add {{ a_a_user }} to postgres"
    postgresql_user:
      name: "{{ a_a_user }}"
      password: "{{ a_a_password }}"
      role_attr_flags: CREATEDB
      db: "{{ a_a_db }}"
      priv: ALL

  - name: "Create {{ web_db }} db"
    postgresql_db:
      name: "{{ web_db }}"

  - name: "Add {{ web_db_user }} to postgres"
    postgresql_user:
      name: "{{ web_db_user }}"
      password: "{{ web_db_password }}"
      role_attr_flags: CREATEDB
      db: "{{ web_db }}"
      priv: ALL

  - name: copy over the rabbit systemd service
    sudo: true
    copy:
      src: files/postgresql.service
      dest: /etc/systemd/system/
      mode: "uog+x"

  - name: Add postgres to systemctl
    sudo: true
    shell: systemctl enable postgresql.service

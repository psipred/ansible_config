---

  - name: "install erlang"
    yum:
      pkg: erlang
      state: latest
    sudo: yes

  - name: "Add {{ rabbit_user }}"
    user: "name={{ rabbit_user }} password={{ rabbit_hashed_password }}"
    sudo: yes

  # we switched to using wget as get_url: has no adjustable timeout and is
  # fixed to 10secs!?!?
  - name: Check if we have the rabbitMQ tarball already
    stat: "path=/home/{{ rabbit_user }}/rabbitmq-server-generic-unix-{{ rabbit_mq_version }}.tar.gz"
    register: rabbit_tarball_exist

  # - name: Download rabbitMQ tarball
  #   # get_url: "url=https://www.rabbitmq.com/releases/rabbitmq-server/v3.5.4/rabbitmq-server-generic-unix-3.5.4.tar.gz dest=/home/{{ rabbit_user }}/rabbitmq-server-generic-unix-3.5.4.tar.gz"
  #   shell: "chdir=/home/{{ rabbit_user }} wget --timeout 120 https://www.rabbitmq.com/releases/rabbitmq-server/v{{ rabbit_mq_version }}/rabbitmq-server-generic-unix-{{ rabbit_mq_version }}.tar.gz -O rabbitmq-server-generic-unix-{{ rabbit_mq_version }}.tar.gz"
  #   when: rabbit_tarball_exist.stat.exists == False
  #   become_user: "{{ rabbit_user }}"
  #   register: get_url_result
  #   until: get_url_result.stdout.find("Unable to establish SSL connection") == -1
  #   retries: 10
  #   delay: 10

  - name: Download RabbitMQ tarball
    become_user: "{{ rabbit_user }}"
    when: rabbit_tarball_exist.stat.exists == False
    get_url:
      url: https://www.rabbitmq.com/releases/rabbitmq-server/v{{ rabbit_mq_version }}/rabbitmq-server-generic-unix-{{ rabbit_mq_version }}.tar.gz
      dest: "/opt/{{ rabbit_user }}}/rabbitmq-server-generic-unix-{{ rabbit_mq_version }}.tar.gz"
      timeout: 120
    register: get_url_result

  - name: untar the tarball
    shell: "cd /home/{{ rabbit_user }}; tar -zxvf /home/{{ rabbit_user }}/rabbitmq-server-generic-unix-{{ rabbit_mq_version }}.tar.gz"
    become_user: "{{ rabbit_user }}"
    when: get_url_result.changed

  - name: Get the current firewalld rules
    shell: firewall-cmd --list-all
    register: firewalldrules
    always_run: yes
    sudo: yes

  - name: Add Erlang
    command: firewall-cmd --zone=public --add-port=4369/tcp --permanent
    sudo: yes
    when: firewalldrules.stdout.find("4369/tcp") == -1

  - name: Add Rabbit firewalld rules
    command: firewall-cmd --zone=public --add-port=25672/tcp --permanent
    sudo: yes
    when: firewalldrules.stdout.find("25672/tcp") == -1

  - name: Add erl firewalld rules
    command: firewall-cmd --zone=public --add-port=15672/tcp --permanent
    sudo: yes
    when: firewalldrules.stdout.find("15672/tcp") == -1

  - name: Add AMQP firewalld rules
    command: firewall-cmd --zone=public --add-port=5671-5672/tcp --permanent
    sudo: yes
    when: firewalldrules.stdout.find("5671-5672/tcp") == -1

  - name: Reload firewalld
    command: firewall-cmd --reload
    sudo: true

  - name: Check rabbitMQ status
    shell: ps aux | grep rabbitmq
    register: rabbit_running
    always_run: yes

  - name: Start rabbitMQ
    command: "/home/{{ rabbit_user }}/rabbitmq_server-{{ rabbit_mq_version }}/sbin/rabbitmq-server -detached"
    become_user: "{{ rabbit_user }}"
    when: rabbit_running.stdout.find("rabbitmq_server-3.5.3/sbin") == -1

  - name: Check rabbitMQ user status
    shell: "/home/{{ rabbit_user }}/rabbitmq_server-{{ rabbit_mq_version }}/sbin/rabbitmqctl list_users"
    become_user: "{{ rabbit_user }}"
    register: rabbit_users
    always_run: yes

  - name: add external rabbit user
    shell: "/home/{{ rabbit_user }}/rabbitmq_server-{{ rabbit_mq_version }}/sbin/rabbitmqctl add_user {{ external_rabbit_user }} {{ external_rabbit_password }}"
    become_user: "{{ rabbit_user }}"
    when: rabbit_users.stdout.find("external_worker") == -1

  - name: set external rabbit user details
    shell: "/home/{{ rabbit_user }}/rabbitmq_server-{{ rabbit_mq_version }}/sbin/rabbitmqctl set_permissions -p / {{ external_rabbit_user }} \".*\" \".*\" \".*\""
    become_user: "{{ rabbit_user }}"
    when: rabbit_users.stdout.find("external_worker") == -1

  - name: Download rabbitMQadmin tarball
    # get_url: "url=https://www.rabbitmq.com/releases/rabbitmq-server/v3.5.4/rabbitmq-server-generic-unix-3.5.4.tar.gz dest=/home/{{ rabbit_user }}/rabbitmq-server-generic-unix-3.5.4.tar.gz"
    shell: "chdir=/home/{{ rabbit_user }} wget --timeout 120 http://bioinfstage1:15672/cli/rabbitmqadmin -O rabbitmqadmin"
    when: rabbit_tarball_exist.stat.exists == False
    become_user: "{{ rabbit_user }}"
    register: get_url_result
    until: get_url_result.stdout.find("rabbitmq_server-3.5.3/sbin") == -1
    retries: 10
    delay: 10

  - name: Download RabbitMQ tarball
    become_user: "{{ rabbit_user }}"
    when: rabbit_tarball_exist.stat.exists == False
    get_url:
      url: http://bioinfstage1:15672/cli/rabbitmqadmin
      dest: "/home/{{ rabbit_user }}"
      timeout: 120
    register: get_url_result

  - name: enable management plugin
    shell: "/home/{{ rabbit_user }}/rabbitmq_server-{{ rabbit_mq_version }}/sbin/rabbitmq-plugins enable rabbitmq_management"
    become_user: "{{ rabbit_user }}"
    when: rabbit_running.stdout.find("rabbitmq_server-3.5.3/sbin") == -1

  - name: enable external user on the management plugin
    shell: "/home/{{ rabbit_user }}/rabbitmq_server-{{ rabbit_mq_version }}/sbin/rabbitmqctl set_user_tags {{ external_rabbit_user }} administrator"
    become_user: "{{ rabbit_user }}"
    when: rabbit_running.stdout.find("rabbitmq_server-3.5.3/sbin") == -1

  # we should restart rabbit if it is already running and we've updated it

  - name: copy over the rabbit systemd service
    sudo: true
    copy:
      src: files/rabbit.service
      dest: /etc/systemd/system/
      mode: "uog+x"

  - name: Add service to systemctl
    sudo: true
    shell: systemctl enable rabbit.service
